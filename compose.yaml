services:
  traefik:
    image: traefik:v3.1
    command:
      # Global configuration
      - "--log.level=DEBUG"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"

      # API & Dashboard
      - "--api.dashboard=true"
      - "--api.insecure=false"

      # Entrypoints configuration
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"

      # Let's Encrypt configuration
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@${REMOTE_HOST}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - mode: host
        protocol: tcp
        published: 80
        target: 80
      - mode: host
        protocol: tcp
        published: 443
        target: 443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"
      # Dashboard
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${REMOTE_HOST}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      # Basic Auth Middleware
      - "traefik.http.middlewares.auth-dashboard.basicauth.users=admin:${TRAEFIK_DASHBOARD_PASSWORD:-admin}"
      - "traefik.http.routers.dashboard.middlewares=auth-dashboard"

  whoami:
    image: traefik/whoami
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"
      - "traefik.http.middlewares.ip-whitelist.ipwhitelist.sourcerange=127.0.0.1/32"

  nginx:
    image: ghcr.io/viewtubeapp/nginx:${GIT_COMMIT_HASH:-latest}
    volumes:
      - uploads:/usr/share/nginx/html/uploads:ro
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"

      # Service configuration
      - "traefik.http.services.nginx.loadbalancer.server.port=80"

      # Router configuration
      - "traefik.http.routers.nginx.rule=Host(`${CDN_HOST}`)"
      - "traefik.http.routers.nginx.entrypoints=websecure"
      - "traefik.http.routers.nginx.priority=100"

      # Middleware
      - "traefik.http.routers.nginx.middlewares=nginx-ip-whitelist"
      - "traefik.http.middlewares.nginx-ip-whitelist.ipwhitelist.sourcerange=0.0.0.0/0"

      # TLS configuration
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.routers.nginx.tls.certresolver=letsencrypt"

  web:
    image: ghcr.io/viewtubeapp/web:${GIT_COMMIT_HASH:-latest}
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"

      # Service configuration
      - "traefik.http.services.web.loadbalancer.server.port=3000"

      # Router configuration
      - "traefik.http.routers.web.rule=Host(`${REMOTE_HOST}`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.priority=100"

      # Middleware
      - "traefik.http.routers.web.middlewares=web-ip-whitelist"
      - "traefik.http.middlewares.web-ip-whitelist.ipwhitelist.sourcerange=0.0.0.0/0"

      # TLS configuration
      - "traefik.http.routers.web.tls=true"
      - "traefik.http.routers.web.tls.certresolver=letsencrypt"
    secrets:
      - db-password
    depends_on:
      - db
      - traefik
      - nginx
      - redis
      - hermes
    volumes:
      - uploads:/app/public/uploads
    deploy:
      update_config:
        order: start-first

  db:
    image: postgres
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${CODENAME}
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  hermes:
    image: ghcr.io/viewtubeapp/hermes:${GIT_COMMIT_HASH:-latest}
    depends_on:
      - redis
    volumes:
      - uploads:/app/uploads
    labels:
      - "traefik.enable=false"
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "0.50"
          memory: 1024M
        reservations:
          cpus: "0.25"
          memory: 512M
      update_config:
        order: start-first

  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: ghcr.io/viewtubeapp/prometheus:${GIT_COMMIT_HASH:-latest}
    volumes:
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${REMOTE_HOST}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"

  grafana:
    image: grafana/grafana:10.2.3
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${REMOTE_HOST}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:v1.7.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    labels:
      - "traefik.enable=false"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    labels:
      - "traefik.enable=false"

volumes:
  db-data:
  uploads:
  redis-data:
  letsencrypt:
  grafana-data:
  prometheus-data:

secrets:
  db-password:
    external: true
