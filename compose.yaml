# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  traefik:
    image: traefik:v3.1
    command:
      - "--log.level=DEBUG"
      - "--providers.docker"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.cdn.address=:8888"
    ports:
      - mode: host
        protocol: tcp
        published: 80
        target: 80
      - mode: host
        protocol: tcp
        published: 8080
        target: 8080
      - mode: host
        protocol: tcp
        published: 8888
        target: 8888
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  whoami:
    image: traefik/whoami
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"
      - "traefik.http.middlewares.ip-whitelist.ipwhitelist.sourcerange=127.0.0.1/32"

  nginx:
    image: ghcr.io/viewtubeapp/nginx:latest
    volumes:
      - uploads:/usr/share/nginx/html:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
      - "traefik.http.routers.nginx.entrypoints=cdn"
      - "traefik.http.routers.nginx.rule=Host(`cdn.viewtube.dev`) || Host(`cdn.docker.localhost`)"
      - "traefik.http.routers.nginx.middlewares=nginx-ip-whitelist"
      - "traefik.http.routers.nginx-ip.entrypoints=cdn"
      - "traefik.http.routers.nginx-ip.rule=PathPrefix(`/`)"
      - "traefik.http.routers.nginx-ip.service=nginx"
      - "traefik.http.routers.nginx-ip.priority=1"
      - "traefik.http.routers.nginx-ip.middlewares=nginx-ip-whitelist"
      - "traefik.http.middlewares.nginx-ip-whitelist.ipwhitelist.sourcerange=0.0.0.0/0"

  web:
    image: ghcr.io/viewtubeapp/web:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
      - "traefik.http.routers.web.entrypoints=web"
      - "traefik.http.routers.web.rule=Host(`viewtube.docker.localhost`) || Host(`viewtube.dev`)"
      - "traefik.http.routers.web.middlewares=web-ip-whitelist"
      - "traefik.http.routers.web-ip.entrypoints=web"
      - "traefik.http.routers.web-ip.rule=PathPrefix(`/`)"
      - "traefik.http.routers.web-ip.service=web"
      - "traefik.http.routers.web-ip.priority=1"
      - "traefik.http.routers.web-ip.middlewares=web-ip-whitelist"
      - "traefik.http.middlewares.web-ip-whitelist.ipwhitelist.sourcerange=0.0.0.0/0"
    secrets:
      - db-password
    depends_on:
      - db
      - traefik
      - nginx
    volumes:
      - uploads:/app/public
    deploy:
      update_config:
        order: start-first

  db:
    image: postgres
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=viewtube
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db-data:
  uploads:

secrets:
  db-password:
    external: true
