# ViewTube Docker Swarm Configuration
#
# This configuration defines a production-ready ViewTube stack for Docker Swarm with:
# - Traefik (v3.1): Edge router and SSL termination with automatic Let's Encrypt certificates
# - Web & API: Main ViewTube application (replicated across swarm for high availability)
# - Nginx: Static content and uploads server (replicated across swarm)
# - Hermes: Background job processor (replicated across swarm)
# - PostgreSQL: Main database (single instance pinned to manager node)
# - RabbitMQ: Message queue for background jobs (single instance pinned to manager node)
# - Redis: Cache and session store (single instance pinned to manager node)
# - Authentik: Identity and access management (single instance pinned to manager node)
# - Monitoring Stack:
#   - Prometheus: Metrics collection and storage (pinned to manager)
#   - Grafana: Metrics visualization and dashboards (pinned to manager)
#   - Node Exporter: System metrics collection (global deployment on all nodes)
#   - cAdvisor: Container metrics collection
#   - Nginx Exporter: Nginx metrics collection
# - Portainer: Container management UI (single instance pinned to manager node)
#
# Swarm Deployment Notes:
# - Global mode: Service runs one task on every node in the swarm (e.g., Node Exporter)
# - Replicated mode: Service runs specified number of tasks distributed across the swarm
# - Placement constraints ensure critical services run only on manager nodes
# - Resource limits and reservations prevent node resource exhaustion
# - Overlay network with encryption enabled for secure container communication
# - External secrets must be created in the swarm before deployment:
#   db-password, grafana-password, traefik-password, prometheus-password, rabbitmq-password

version: "3.8"

services:
  web:
    image: ghcr.io/viewtubeapp/web:${GIT_COMMIT_HASH:-latest}
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"

      # Service configuration
      - "traefik.http.services.web.loadbalancer.server.port=3000"

      # Router configuration
      - "traefik.http.routers.web.rule=Host(`${REMOTE_HOST?:REMOTE_HOST is required}`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.priority=100"

      # Middleware
      - "traefik.http.routers.web.middlewares=web-ip-whitelist"
      - "traefik.http.middlewares.web-ip-whitelist.ipwhitelist.sourcerange=0.0.0.0/0"

      # TLS configuration
      - "traefik.http.routers.web.tls=true"
      - "traefik.http.routers.web.tls.certresolver=letsencrypt"
    depends_on:
      - db
      - traefik
      - nginx
      - hermes
      - rabbitmq
    volumes:
      - uploads:/app/public/uploads
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 1
        failure_action: pause
      resources:
        limits:
          cpus: "0.5"
          memory: 1024M
        reservations:
          cpus: "0.2"
          memory: 512M

  db:
    image: postgres
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB:?POSTGRES_DB is required}
      - POSTGRES_USER=${POSTGRES_USER:?POSTGRES_USER is required}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      update_config:
        order: stop-first
        failure_action: rollback
      resources:
        limits:
          cpus: "0.5"
          memory: 1024M
        reservations:
          cpus: "0.2"
          memory: 512M

  rabbitmq:
    image: ghcr.io/viewtubeapp/rabbitmq:${GIT_COMMIT_HASH:-latest}
    environment:
      - RABBITMQ_PLUGINS=rabbitmq_prometheus
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:?RABBITMQ_USER is required}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:?RABBITMQ_PASSWORD is required}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=false"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      update_config:
        order: stop-first
        failure_action: rollback
      resources:
        limits:
          cpus: "0.25"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 256M

  hermes:
    image: ghcr.io/viewtubeapp/hermes:${GIT_COMMIT_HASH:-latest}
    depends_on:
      - db
      - rabbitmq
    volumes:
      - uploads:/app/uploads
    labels:
      - "traefik.enable=false"
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 1
        failure_action: pause
      resources:
        limits:
          cpus: "1.0"
          memory: 4096M
        reservations:
          cpus: "0.5"
          memory: 2048M

  redis:
    image: redis:alpine
    command: --save 60 1 --loglevel debug
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis-data:/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      update_config:
        order: stop-first
        failure_action: rollback
      resources:
        limits:
          cpus: "0.25"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 128M

  auth-server:
    image: ghcr.io/goauthentik/server:2024.10.5
    command: server
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"

      # Service configuration
      - "traefik.http.services.auth-server.loadbalancer.server.port=9000"

      # Router configuration
      - "traefik.http.routers.auth-server.rule=Host(`auth.${REMOTE_HOST?:REMOTE_HOST is required}`)"
      - "traefik.http.routers.auth-server.entrypoints=websecure"
      - "traefik.http.routers.auth-server.tls=true"
      - "traefik.http.routers.auth-server.tls.certresolver=letsencrypt"
    environment:
      - AUTHENTIK_LOG_LEVEL=debug
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_ERROR_REPORTING__ENABLED=true
      - AUTHENTIK_POSTGRESQL__HOST=${POSTGRES_HOST:?POSTGRES_HOST is required}
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER:?POSTGRES_USER is required}
      - AUTHENTIK_POSTGRESQL__NAME=${POSTGRES_DB:?POSTGRES_DB is required}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY:?AUTHENTIK_SECRET_KEY is required}
    depends_on:
      - db
      - redis
    volumes:
      - auth-media:/media
      - auth-custom-templates:/templates
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      update_config:
        order: stop-first
        failure_action: rollback
      resources:
        limits:
          cpus: "0.25"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 128M

  auth-worker:
    image: ghcr.io/goauthentik/server:2024.10.5
    command: worker
    environment:
      - AUTHENTIK_LOG_LEVEL=debug
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_ERROR_REPORTING__ENABLED=true
      - AUTHENTIK_POSTGRESQL__HOST=${POSTGRES_HOST:?POSTGRES_HOST is required}
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER:?POSTGRES_USER is required}
      - AUTHENTIK_POSTGRESQL__NAME=${POSTGRES_DB:?POSTGRES_DB is required}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY:?AUTHENTIK_SECRET_KEY is required}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - auth-media:/media
      - auth-custom-templates:/templates
      - auth-certs:/certs
    depends_on:
      - db
      - redis
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      update_config:
        order: stop-first
        failure_action: rollback
      resources:
        limits:
          cpus: "0.25"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 128M

  traefik:
    image: traefik:v3.1
    command:
      # Global configuration
      - "--log.level=DEBUG"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"

      # API & Dashboard
      - "--api.dashboard=true"
      - "--api.insecure=true"

      # Metrics configuration
      - "--metrics.prometheus=true"
      - "--entrypoints.metrics.address=:8090"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"

      # Entrypoints configuration
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"

      # Let's Encrypt configuration
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@${REMOTE_HOST?:REMOTE_HOST is required}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"

    ports:
      - mode: host
        protocol: tcp
        published: 80
        target: 80
      - mode: host
        protocol: tcp
        published: 443
        target: 443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - letsencrypt:/letsencrypt
    secrets:
      - traefik-password
      - prometheus-password
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"

      # Router configuration
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${REMOTE_HOST?:REMOTE_HOST is required}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"

      # Basic Auth Middleware
      - "traefik.http.middlewares.auth-dashboard.basicauth.usersfile=/run/secrets/traefik-password"
      - "traefik.http.routers.dashboard.middlewares=auth-dashboard"
    deploy:
      mode: global
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 1
        failure_action: pause
      resources:
        limits:
          cpus: "0.25"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 128M
      placement:
        constraints:
          - node.role == manager

  whoami:
    image: traefik/whoami
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"
      - "traefik.http.middlewares.ip-whitelist.ipwhitelist.sourcerange=127.0.0.1/32"

  nginx:
    image: ghcr.io/viewtubeapp/nginx:${GIT_COMMIT_HASH:-latest}
    volumes:
      - uploads:/usr/share/nginx/html/uploads:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - nginx-status:/var/log/nginx:ro
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"

      # Service configuration
      - "traefik.http.services.nginx.loadbalancer.server.port=80"

      # Router configuration
      - "traefik.http.routers.nginx.rule=Host(`${CDN_HOST:?CDN_HOST is required}`)"
      - "traefik.http.routers.nginx.entrypoints=websecure"
      - "traefik.http.routers.nginx.priority=100"

      # Middleware
      - "traefik.http.routers.nginx.middlewares=nginx-ip-whitelist"
      - "traefik.http.middlewares.nginx-ip-whitelist.ipwhitelist.sourcerange=0.0.0.0/0"

      # TLS configuration
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.routers.nginx.tls.certresolver=letsencrypt"
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 1
        failure_action: pause
      resources:
        limits:
          cpus: "0.25"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 128M

  prometheus:
    image: ghcr.io/viewtubeapp/prometheus:${GIT_COMMIT_HASH:-latest}
    volumes:
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    secrets:
      - prometheus-password
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"

      # Service configuration
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

      # Router configuration
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${REMOTE_HOST?:REMOTE_HOST is required}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"

      # Basic Auth Middleware
      - "traefik.http.middlewares.auth-prometheus.basicauth.usersfile=/run/secrets/prometheus-password"
      - "traefik.http.routers.prometheus.middlewares=auth-prometheus"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      update_config:
        order: stop-first
        failure_action: rollback
      resources:
        limits:
          cpus: "0.5"
          memory: 2048M
        reservations:
          cpus: "0.2"
          memory: 1024M

  grafana:
    image: grafana/grafana:10.2.3
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana-password
    secrets:
      - grafana-password
    labels:
      - "traefik.enable=true"

      # Service configuration
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

      # Router configuration
      - "traefik.http.routers.grafana.rule=Host(`grafana.${REMOTE_HOST?:REMOTE_HOST is required}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
    depends_on:
      - prometheus
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      update_config:
        order: stop-first
        failure_action: rollback
      resources:
        limits:
          cpus: "0.25"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 256M

  node-exporter:
    image: prom/node-exporter:v1.7.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    labels:
      - "traefik.enable=false"
    deploy:
      mode: global
      update_config:
        order: start-first
      resources:
        limits:
          cpus: "0.1"
          memory: 128M
        reservations:
          cpus: "0.05"
          memory: 64M

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:1.0.0
    command:
      - -nginx.scrape-uri=http://nginx:80/stub_status
    depends_on:
      - nginx
    labels:
      - "traefik.enable=false"
    deploy:
      mode: global
      update_config:
        order: start-first
      resources:
        limits:
          cpus: "0.1"
          memory: 128M
        reservations:
          cpus: "0.05"
          memory: 64M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    labels:
      - "traefik.enable=false"

  portainer:
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"

      # Service configuration
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

      # Router configuration
      - "traefik.http.routers.portainer.rule=Host(`portainer.${REMOTE_HOST?:REMOTE_HOST is required}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      update_config:
        order: stop-first
        failure_action: rollback
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 256M

volumes:
  uploads: # Uploads volume
  db-data: # Database volume
  redis-data: # Redis volume
  rabbitmq-data: # RabbitMQ volume

  auth-media: # Auth media volume
  auth-certs: # Auth certs volume
  auth-custom-templates: # Auth custom templates volume

  letsencrypt: # Let's Encrypt volume
  nginx-status: # Nginx status volume
  grafana-data: # Grafana data volume
  portainer-data: # Portainer data volume
  prometheus-data: # Prometheus data volume

secrets:
  grafana-password: # Grafana password
    external: true
  traefik-password: # Traefik password
    external: true
  prometheus-password: # Prometheus password
    external: true

networks:
  default:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"
