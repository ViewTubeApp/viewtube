---
description: Rules for React components organization and patterns
globs: src/components/**/*.{ts,tsx}
---

# React Component Patterns

## Component Organization
- Place components in `src/components` directory
- UI components go in `src/components/ui` (shadcn/ui components)
- Feature-specific components go in feature-specific directories
- Use index files for exporting multiple components from a directory

## UI Components
- Use shadcn/ui components as building blocks whenever possible
- Place shadcn/ui components in `src/components/ui`
- Follow shadcn/ui naming conventions (e.g., button.tsx, dialog.tsx)
- Customize components using the provided CSS variables and Tailwind classes

## Component Structure
- Use "use client" directive for client-side components
- Export components as named exports
- Use `React.memo()` for performance-critical components
- Define component display names for better debugging

## Props and Types
- Define prop interfaces with `Props` suffix
- Use TypeScript types for simple prop definitions
- Place prop interfaces before the component definition
- Export prop types when they might be reused
- Reuse shadcn/ui component types when extending their components

## Component Best Practices
- Use composition over inheritance
- Keep components focused and single-responsibility
- Extract reusable logic into custom hooks
- Use proper semantic HTML elements
- Prefer shadcn/ui components over custom implementations for common UI patterns

## State Management
- Use hooks for local state management
- Prefer controlled components when possible
- Use context for deeply nested state sharing
- Keep state as close to where it's used as possible

## Styling
- Use Tailwind CSS for styling
- Use `cn()` utility from shadcn/ui for conditional classes
- Follow mobile-first responsive design
- Use design system tokens and variables
- Follow shadcn/ui theming patterns for consistent styling

## Performance
- Memoize callbacks with useCallback when passed as props
- Memoize expensive computations with useMemo
- Use proper key props in lists
- Avoid unnecessary re-renders

## Accessibility
- Include proper ARIA attributes
- Ensure keyboard navigation works
- Provide proper labels for interactive elements
- Support screen readers with descriptive text
- Leverage shadcn/ui's built-in accessibility features

## Error Handling
- Use error boundaries for component error catching
- Provide fallback UI for error states
- Handle loading states gracefully
- Use proper TypeScript error types

## Testing
- Write unit tests for complex components
- Test component interactions and user flows
- Use proper testing utilities and mocks
- Follow testing best practices

