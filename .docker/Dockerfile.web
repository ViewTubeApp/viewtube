################################################################################
# Use node image for base image for all stages.
FROM imbios/bun-node:1.2.4-22.14.0-alpine AS base

# Install ffmpeg
RUN apk add --no-cache --update ffmpeg

# Set working directory for all build stages.
WORKDIR /usr/src/app

################################################################################
# Create a stage for building the application.
FROM base AS build

ENV SKIP_ENV_VALIDATION=true

ARG NEXT_PUBLIC_BRAND
ARG NEXT_PUBLIC_URL
ARG NEXT_PUBLIC_CDN_URL
ARG NEXT_PUBLIC_POSTHOG_HOST
ARG NEXT_PUBLIC_GIT_COMMIT_HASH

COPY package.json .
COPY bun.lock .

RUN bun install --frozen-lockfile

# Copy the rest of the source files into the image.
COPY . .

# Run the build script.
RUN bun run build

################################################################################
# Create a new stage to run the application with minimal runtime dependencies
# where the necessary files are copied from the build stage.
FROM base AS serve

# Set the working directory to /app.
WORKDIR /app

# Copy package.json so that package manager commands can be used.
COPY --from=build /usr/src/app/package.json .
COPY --from=build /usr/src/app/bun.lock .
RUN bun install --production --frozen-lockfile

# Copy the production dependencies from the deps stage and also
# the built application from the build stage into the image.
COPY --from=build /usr/src/app/src ./src
COPY --from=build /usr/src/app/.next ./.next
COPY --from=build /usr/src/app/tsconfig.json .
COPY --from=build /usr/src/app/public ./public
COPY --from=build /usr/src/app/next.config.ts .
COPY --from=build /usr/src/app/drizzle.config.ts .
COPY --from=build /usr/src/app/messages ./.messages

# Expose the port that the application listens on.
EXPOSE 3000

# Apply migrations and run the application.
CMD ["/bin/sh", "-c", "bun run db:push --force && bun run start"]
