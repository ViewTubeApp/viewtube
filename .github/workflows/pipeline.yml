name: pipeline
on:
  push:
    branches:
      - "main"

permissions:
  packages: write

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Web image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.web
          push: true
          tags: |
            ghcr.io/viewtubeapp/web:latest
            ghcr.io/viewtubeapp/web:${{ github.sha }}
          build-args: |
            UPLOADS_VOLUME=${{ vars.UPLOADS_VOLUME }}

            NEXT_PUBLIC_URL=${{ vars.NEXT_PUBLIC_URL }}
            NEXT_PUBLIC_BRAND=${{ vars.NEXT_PUBLIC_BRAND }}
            NEXT_PUBLIC_CDN_URL=${{ vars.NEXT_PUBLIC_CDN_URL }}

            AUTH_URL=${{ vars.AUTH_URL }}
            AUTH_TRUST_HOST=${{ vars.AUTH_TRUST_HOST }}
            AUTHENTIK_SECRET_KEY=${{ secrets.AUTHENTIK_SECRET_KEY }}
            AUTHENTIK_AUTH_ISSUER=${{ vars.AUTHENTIK_AUTH_ISSUER }}
            AUTHENTIK_AUTH_CLIENT_ID=${{ vars.AUTHENTIK_AUTH_CLIENT_ID }}
            AUTHENTIK_AUTH_CLIENT_SECRET=${{ secrets.AUTHENTIK_AUTH_CLIENT_SECRET }}

            POSTGRES_HOST=${{ vars.POSTGRES_HOST }}
            POSTGRES_PORT=${{ vars.POSTGRES_PORT }}
            POSTGRES_DB=${{ vars.POSTGRES_DB }}
            POSTGRES_USER=${{ vars.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}

            RABBITMQ_HOST=${{ vars.RABBITMQ_HOST }}
            RABBITMQ_PORT=${{ vars.RABBITMQ_PORT }}
            RABBITMQ_USER=${{ vars.RABBITMQ_USER }}
            RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}
          cache-from: type=registry,ref=ghcr.io/viewtubeapp/web:buildcache
          cache-to: type=registry,ref=ghcr.io/viewtubeapp/web:buildcache,mode=max

      - name: Build and push Nginx image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.nginx
          push: true
          tags: |
            ghcr.io/viewtubeapp/nginx:latest
            ghcr.io/viewtubeapp/nginx:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/viewtubeapp/nginx:buildcache
          cache-to: type=registry,ref=ghcr.io/viewtubeapp/nginx:buildcache,mode=max

      - name: Build and push Hermes image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.hermes
          push: true
          tags: |
            ghcr.io/viewtubeapp/hermes:latest
            ghcr.io/viewtubeapp/hermes:${{ github.sha }}
          build-args: |
            UPLOADS_VOLUME=${{ vars.UPLOADS_VOLUME }}

            POSTGRES_HOST=${{ vars.POSTGRES_HOST }}
            POSTGRES_PORT=${{ vars.POSTGRES_PORT }}
            POSTGRES_DB=${{ vars.POSTGRES_DB }}
            POSTGRES_USER=${{ vars.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}

            RABBITMQ_HOST=${{ vars.RABBITMQ_HOST }}
            RABBITMQ_PORT=${{ vars.RABBITMQ_PORT }}
            RABBITMQ_USER=${{ vars.RABBITMQ_USER }}
            RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}
          cache-from: type=registry,ref=ghcr.io/viewtubeapp/hermes:buildcache
          cache-to: type=registry,ref=ghcr.io/viewtubeapp/hermes:buildcache,mode=max

      - name: Build and push Prometheus image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.prometheus
          push: true
          tags: |
            ghcr.io/viewtubeapp/prometheus:latest
            ghcr.io/viewtubeapp/prometheus:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/viewtubeapp/prometheus:buildcache
          cache-to: type=registry,ref=ghcr.io/viewtubeapp/prometheus:buildcache,mode=max

      - name: Build and push RabbitMQ image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.rabbitmq
          push: true
          tags: |
            ghcr.io/viewtubeapp/rabbitmq:latest
            ghcr.io/viewtubeapp/rabbitmq:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/viewtubeapp/rabbitmq:buildcache
          cache-to: type=registry,ref=ghcr.io/viewtubeapp/rabbitmq:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-images
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create env file
        run: |
          echo "CDN_HOST=${{ vars.CDN_HOST }}" >> ./envfile
          echo "UPLOADS_VOLUME=${{ vars.UPLOADS_VOLUME }}" >> ./envfile
          echo "REMOTE_HOST=${{ vars.REMOTE_HOST }}" >> ./envfile
          echo "GIT_COMMIT_HASH=${{ github.sha }}" >> ./envfile
          echo "AUTHENTIK_SECRET_KEY=${{ secrets.AUTHENTIK_SECRET_KEY }}" >> ./envfile

          echo "POSTGRES_HOST=${{ vars.POSTGRES_HOST }}" >> ./envfile
          echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> ./envfile
          echo "POSTGRES_USER=${{ vars.POSTGRES_USER }}" >> ./envfile
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> ./envfile

          echo "RABBITMQ_USER=${{ vars.RABBITMQ_USER }}" >> ./envfile
          echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> ./envfile

      - name: Deploy stack
        uses: cssnr/stack-deploy-action@v1
        with:
          name: ${{ vars.CODENAME }}
          file: compose.yaml
          host: ${{ vars.REMOTE_HOST }}
          user: ${{ vars.DEPLOY_USER }}
          ssh_key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
          env_file: ./envfile
