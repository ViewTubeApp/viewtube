name: pipeline
on:
  push:
    branches:
      - "main"

permissions:
  packages: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.5

      - name: Run lint
        env:
          SKIP_ENV_VALIDATION: true
        run: |
          bun install
          bun intl:compile
          bun type-check && bun lint

  build-web:
    runs-on: ubuntu-latest
    needs:
      - lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Web image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .docker/Dockerfile.web
          push: true
          tags: |
            ghcr.io/viewtubeapp/web:latest
            ghcr.io/viewtubeapp/web:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/viewtubeapp/web:buildcache
          cache-to: type=registry,ref=ghcr.io/viewtubeapp/web:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_GIT_COMMIT_HASH=${{ github.sha }}
            NEXT_PUBLIC_BRAND=${{ vars.NEXT_PUBLIC_BRAND }}
            NEXT_PUBLIC_URL=${{ vars.NEXT_PUBLIC_URL }}
            NEXT_PUBLIC_CDN_URL=${{ vars.NEXT_PUBLIC_CDN_URL }}

  build-hermes:
    runs-on: ubuntu-latest
    needs:
      - lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Hermes image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .docker/Dockerfile.hermes
          push: true
          tags: |
            ghcr.io/viewtubeapp/hermes:latest
            ghcr.io/viewtubeapp/hermes:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/viewtubeapp/hermes:buildcache
          cache-to: type=registry,ref=ghcr.io/viewtubeapp/hermes:buildcache,mode=max

  build-nginx:
    runs-on: ubuntu-latest
    needs:
      - lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Nginx image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .docker/Dockerfile.nginx
          push: true
          tags: |
            ghcr.io/viewtubeapp/nginx:latest
            ghcr.io/viewtubeapp/nginx:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/viewtubeapp/nginx:buildcache
          cache-to: type=registry,ref=ghcr.io/viewtubeapp/nginx:buildcache,mode=max

  build-prometheus:
    runs-on: ubuntu-latest
    needs:
      - lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Prometheus image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .docker/Dockerfile.prometheus
          push: true
          tags: |
            ghcr.io/viewtubeapp/prometheus:latest
            ghcr.io/viewtubeapp/prometheus:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/viewtubeapp/prometheus:buildcache
          cache-to: type=registry,ref=ghcr.io/viewtubeapp/prometheus:buildcache,mode=max

  build-rabbitmq:
    runs-on: ubuntu-latest
    needs:
      - lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push RabbitMQ image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .docker/Dockerfile.rabbitmq
          push: true
          tags: |
            ghcr.io/viewtubeapp/rabbitmq:latest
            ghcr.io/viewtubeapp/rabbitmq:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/viewtubeapp/rabbitmq:buildcache
          cache-to: type=registry,ref=ghcr.io/viewtubeapp/rabbitmq:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-web
      - build-hermes
      - build-nginx
      - build-prometheus
      - build-rabbitmq
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Merge compose files
        run: |
          yq eval-all '. as $item ireduce ({}; . * $item ) | del(.include)' \
            compose.yaml \
            .docker/compose/app.yaml \
            .docker/compose/auth.yaml \
            .docker/compose/cache.yaml \
            .docker/compose/database.yaml \
            .docker/compose/messaging.yaml \
            .docker/compose/monitoring.yaml \
            .docker/compose/proxy.yaml \
            .docker/compose/tools.yaml > merged-compose.yaml

      - name: Create env file
        run: |
          echo "CDN_HOST=${{ vars.CDN_HOST }}" >> ./envfile
          echo "UPLOADS_VOLUME=${{ vars.UPLOADS_VOLUME }}" >> ./envfile
          echo "NEXT_PUBLIC_URL=${{ vars.NEXT_PUBLIC_URL }}" >> ./envfile
          echo "NEXT_PUBLIC_BRAND=${{ vars.NEXT_PUBLIC_BRAND }}" >> ./envfile
          echo "NEXT_PUBLIC_CDN_URL=${{ vars.NEXT_PUBLIC_CDN_URL }}" >> ./envfile
          echo "AUTH_URL=${{ vars.AUTH_URL }}" >> ./envfile
          echo "AUTH_TRUST_HOST=${{ vars.AUTH_TRUST_HOST }}" >> ./envfile
          echo "AUTHENTIK_SECRET_KEY=${{ secrets.AUTHENTIK_SECRET_KEY }}" >> ./envfile
          echo "AUTHENTIK_AUTH_ISSUER=${{ vars.AUTHENTIK_AUTH_ISSUER }}" >> ./envfile
          echo "AUTHENTIK_AUTH_CLIENT_ID=${{ vars.AUTHENTIK_AUTH_CLIENT_ID }}" >> ./envfile
          echo "AUTHENTIK_AUTH_CLIENT_SECRET=${{ secrets.AUTHENTIK_AUTH_CLIENT_SECRET }}" >> ./envfile
          echo "REMOTE_HOST=${{ vars.REMOTE_HOST }}" >> ./envfile
          echo "GIT_COMMIT_HASH=${{ github.sha }}" >> ./envfile
          echo "POSTGRES_HOST=${{ vars.POSTGRES_HOST }}" >> ./envfile
          echo "WEB_POSTGRES_DB=${{ vars.WEB_POSTGRES_DB }}" >> ./envfile
          echo "AUTH_POSTGRES_DB=${{ vars.AUTH_POSTGRES_DB }}" >> ./envfile
          echo "POSTGRES_PORT=${{ vars.POSTGRES_PORT }}" >> ./envfile
          echo "POSTGRES_USER=${{ vars.POSTGRES_USER }}" >> ./envfile
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> ./envfile
          echo "RABBITMQ_HOST=${{ vars.RABBITMQ_HOST }}" >> ./envfile
          echo "RABBITMQ_PORT=${{ vars.RABBITMQ_PORT }}" >> ./envfile
          echo "RABBITMQ_USER=${{ vars.RABBITMQ_USER }}" >> ./envfile
          echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> ./envfile
          echo "PGADMIN_EMAIL=${{ vars.PGADMIN_EMAIL }}" >> ./envfile
          echo "PGADMIN_PASSWORD=${{ secrets.PGADMIN_PASSWORD }}" >> ./envfile

      - name: Deploy stack
        uses: cssnr/stack-deploy-action@v1
        with:
          name: ${{ vars.CODENAME }}
          file: merged-compose.yaml
          host: ${{ vars.REMOTE_HOST }}
          user: ${{ vars.DEPLOY_USER }}
          ssh_key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
          env_file: ./envfile
