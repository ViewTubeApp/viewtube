name: pipeline
on:
  push:
    branches:
      - "main"

permissions:
  packages: write

jobs:
  lint-web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🔧 Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.5

      - name: 🔍 Lint & Typecheck
        env:
          SKIP_ENV_VALIDATION: true
        run: |
          bun install
          bun check

  build-web:
    runs-on: ubuntu-latest
    needs:
      - lint-web
    steps:
      - uses: actions/checkout@v4

      - name: 🔧 Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.5

      - name: 🔍 Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/bun.lockb') }}-

      - name: 📦 Build Next.js
        env:
          SKIP_ENV_VALIDATION: true
        run: |
          bun install
          bun run build

      - name: 🔧 Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Build Docker
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .docker/Dockerfile.web
          push: true
          tags: |
            ghcr.io/viewtubeapp/web:latest
            ghcr.io/viewtubeapp/web:${{ github.sha }}
          build-args: |
            # General
            NEXT_PUBLIC_URL=${{ vars.NEXT_PUBLIC_URL }}
            NEXT_PUBLIC_GIT_COMMIT_HASH=${{ github.sha }}
            NEXT_PUBLIC_BRAND=${{ vars.NEXT_PUBLIC_BRAND }}

            # Analytics (PostHog)
            NEXT_PUBLIC_POSTHOG_HOST=${{ vars.NEXT_PUBLIC_POSTHOG_HOST }}
            NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}

            # Authentication (Clerk)
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}

            # UploadThing
            NEXT_PUBLIC_UPLOADTHING_APP_ID=${{ vars.NEXT_PUBLIC_UPLOADTHING_APP_ID }}

  build-prometheus:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Build and push Prometheus image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .docker/Dockerfile.prometheus
          push: true
          tags: |
            ghcr.io/viewtubeapp/prometheus:latest
            ghcr.io/viewtubeapp/prometheus:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/viewtubeapp/prometheus:buildcache
          cache-to: type=registry,ref=ghcr.io/viewtubeapp/prometheus:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-web
      - build-prometheus
    steps:
      - uses: actions/checkout@v4

      - name: 📦 Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: 🔍 Merge compose files
        run: |
          yq eval-all '. as $item ireduce ({}; . * $item ) | del(.include)' \
            compose.yaml \
            .docker/compose/app.yaml \
            .docker/compose/monitoring.yaml \
            .docker/compose/proxy.yaml \
            .docker/compose/tools.yaml > merged-compose.yaml

      - name: 📄 Create env file
        run: |
          # General
          echo "GIT_COMMIT_HASH=${{ github.sha }}" >> ./envfile
          echo "REMOTE_HOST=${{ vars.REMOTE_HOST }}" >> ./envfile

          # Client
          echo "NEXT_PUBLIC_URL=${{ vars.NEXT_PUBLIC_URL }}" >> ./envfile
          echo "NEXT_PUBLIC_BRAND=${{ vars.NEXT_PUBLIC_BRAND }}" >> ./envfile

          # Trigger.dev
          echo "TRIGGER_SECRET_KEY=${{ secrets.TRIGGER_SECRET_KEY }}" >> ./envfile

          # Analytics (PostHog)
          echo "NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}" >> ./envfile
          echo "NEXT_PUBLIC_POSTHOG_HOST=${{ vars.NEXT_PUBLIC_POSTHOG_HOST }}" >> ./envfile

          # Authentication (Clerk)
          echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}" >> ./envfile
          echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}" >> ./envfile

          # Database (PlanetScale)
          echo "DATABASE_HOST=${{ vars.DATABASE_HOST }}" >> ./envfile
          echo "DATABASE_USERNAME=${{ vars.DATABASE_USERNAME }}" >> ./envfile
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> ./envfile
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> ./envfile

          # UploadThing
          echo "UPLOADTHING_TOKEN=${{ secrets.UPLOADTHING_TOKEN }}" >> ./envfile
          echo "NEXT_PUBLIC_UPLOADTHING_APP_ID=${{ vars.NEXT_PUBLIC_UPLOADTHING_APP_ID }}" >> ./envfile

          cat ./envfile

      - name: 🚀 Deploy stack
        uses: cssnr/stack-deploy-action@v1
        with:
          name: ${{ vars.CODENAME }}
          file: merged-compose.yaml
          host: ${{ vars.REMOTE_HOST }}
          user: ${{ vars.DEPLOY_USER }}
          ssh_key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
          env_file: ./envfile
